initSidebarItems({"enum":[["PollError","Possible errors that a future can be resolved with"]],"fn":[["collect","Creates a future which represents a collection of the results of the futures given."],["done","Creates a new \"leaf future\" which will resolve with the given result."],["empty","Creates a future which never resolves, representing a computation that never finishes."],["failed","Creates a \"leaf future\" from an immediate value of a failed computation."],["finished","Creates a \"leaf future\" from an immediate value of a finished and successful computation."],["lazy","Creates a new future which will eventually be the same as the one created by the closure provided."],["promise","Creates a new in-memory promise used to represent completing a computation."]],"mod":[["executor","Work in progress implementation of executors for Futures."]],"struct":[["AndThen","Future for the `and_then` combinator, chaining a computation onto the end of another future which completes successfully."],["Collect","A future which takes a list of futures and resolves with a vector of the completed values."],["Complete","Represents the completion half of a promise through which the result of a computation is signaled."],["Done","A future representing a value that is immediately ready."],["Empty","A future which is never resolved."],["Failed","A future representing a finished but erroneous computation."],["Finished","A future representing a finished successful computation."],["Flatten","Future for the `flatten` combinator, flattening a future-of-a-future to just the result of the final future."],["Join","Future for the `join` combinator, waiting for two futures to complete."],["Lazy","A future which defers creation of the actual future until a callback is scheduled."],["Map","Future for the `map` combinator, changing the type of a future."],["MapErr","Future for the `map_err` combinator, changing the error type of a future."],["OrElse","Future for the `or_else` combinator, chaining a computation onto the end of a future which fails with an error."],["Promise","A future representing the completion of a computation happening elsewhere in memory."],["Select","Future for the `select` combinator, waiting for one of two futures to complete."],["SelectNext","Future yielded as the second result in a `Select` future."],["Then","Future for the `then` combinator, chaining computations on the end of another future regardless of its outcome."],["Tokens","A bloom-filter-like set of \"tokens\" which is used to prune the amount of calls to `poll` in a future computation graph."]],"trait":[["Future","Trait for types which represent a placeholder of a value that will become available at possible some later point in time."],["IntoFuture","Class of types which can be converted themselves into a future."],["Wake","A trait essentially representing `Fn(&Tokens) + Send + Send + 'static`."]],"type":[["PollResult","The result yielded to the `Future::schedule` callback which indicates the final result of a future."]]});