var searchIndex = {};
searchIndex["futures"] = {"doc":"A work-in-progress futures library for Rust.","items":[[3,"Tokens","futures","A bloom-filter-like set of &quot;tokens&quot; which is used to prune the amount of\ncalls to `poll` in a future computation graph.",null,null],[3,"Collect","","A future which takes a list of futures and resolves with a vector of the\ncompleted values.",null,null],[3,"Done","","A future representing a value that is immediately ready.",null,null],[3,"Empty","","A future which is never resolved.",null,null],[3,"Failed","","A future representing a finished but erroneous computation.",null,null],[3,"Finished","","A future representing a finished successful computation.",null,null],[3,"Lazy","","A future which defers creation of the actual future until a callback is\nscheduled.",null,null],[3,"Promise","","A future representing the completion of a computation happening elsewhere in\nmemory.",null,null],[3,"Complete","","Represents the completion half of a promise through which the result of a\ncomputation is signaled.",null,null],[3,"AndThen","","Future for the `and_then` combinator, chaining a computation onto the end of\nanother future which completes successfully.",null,null],[3,"Flatten","","Future for the `flatten` combinator, flattening a future-of-a-future to just\nthe result of the final future.",null,null],[3,"Join","","Future for the `join` combinator, waiting for two futures to complete.",null,null],[3,"Map","","Future for the `map` combinator, changing the type of a future.",null,null],[3,"MapErr","","Future for the `map_err` combinator, changing the error type of a future.",null,null],[3,"OrElse","","Future for the `or_else` combinator, chaining a computation onto the end of\na future which fails with an error.",null,null],[3,"Select","","Future for the `select` combinator, waiting for one of two futures to\ncomplete.",null,null],[3,"SelectNext","","Future yielded as the second result in a `Select` future.",null,null],[3,"Then","","Future for the `then` combinator, chaining computations on the end of\nanother future regardless of its outcome.",null,null],[4,"PollError","","Possible errors that a future can be resolved with",null,null],[13,"Other","","Generic payload indicating that a future has resolved with a custom\nerror (e.g. an I/O error). This is the standard error that will likely\ncome up the most.",0,null],[13,"Panicked","","Indicates that this future somewhere along the way panicked and the\npayload was captured in a `Box&lt;Any+Send&gt;` here.",0,null],[5,"collect","","Creates a future which represents a collection of the results of the futures\ngiven.",null,{"inputs":[{"name":"i"}],"output":{"name":"collect"}}],[5,"done","","Creates a new &quot;leaf future&quot; which will resolve with the given result.",null,{"inputs":[{"name":"result"}],"output":{"name":"done"}}],[5,"empty","","Creates a future which never resolves, representing a computation that never\nfinishes.",null,{"inputs":[],"output":{"name":"empty"}}],[5,"failed","","Creates a &quot;leaf future&quot; from an immediate value of a failed computation.",null,{"inputs":[{"name":"e"}],"output":{"name":"failed"}}],[5,"finished","","Creates a &quot;leaf future&quot; from an immediate value of a finished and\nsuccessful computation.",null,{"inputs":[{"name":"t"}],"output":{"name":"finished"}}],[5,"lazy","","Creates a new future which will eventually be the same as the one created\nby the closure provided.",null,{"inputs":[{"name":"f"}],"output":{"name":"lazy"}}],[5,"promise","","Creates a new in-memory promise used to represent completing a computation.",null,null],[11,"map","","Maps data contained in this error with the provided closure.",0,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"fmt","","",1,null],[11,"clone","","",1,null],[11,"empty","","Creates a new set of tokens representing that no events have happened.",1,{"inputs":[],"output":{"name":"tokens"}}],[11,"all","","Creates a new set of tokens representing that all possible events may\nhave happened.",1,{"inputs":[],"output":{"name":"tokens"}}],[11,"from_usize","","Creates a new set of tokens from the `usize` sentinel provided.",1,{"inputs":[{"name":"usize"}],"output":{"name":"tokens"}}],[11,"as_usize","","Returns this set of tokens as a `usize`.",1,null],[11,"may_contain","","Returns whether this set of tokens may contain any token contained in\n`other`.",1,null],[0,"executor","","Work in progress implementation of executors for Futures.",null,null],[3,"Inline","futures::executor","Implementation of an `Executor` which just executes everything immediately\nas soon as it&#39;s passed in.",null,null],[3,"Limited","","Implementation of an executor which executes all callbacks immediately, but\nbounds the amount of recursion to prevent blowing the stack.",null,null],[7,"DEFAULT","","The default executor, used by futures by default currently.",null,null],[8,"Executor","","Encapsulation of a value which has the ability to execute arbitrary code.",null,null],[11,"execute","","Executes the given closure `f`, perhaps on a different thread or\ndeferred to a later time.",2,null],[10,"execute_boxed","","Object-safe method of the above interface used when implementing trait\nobjects.",2,null],[8,"ExecuteCallback","","Essentially `Box&lt;FnOnce() + Send&gt;`, just as a trait.",null,null],[10,"call","","",3,{"inputs":[{"name":"box"}],"output":null}],[11,"execute_boxed","alloc::boxed","",4,null],[11,"execute_boxed","alloc::arc","",5,null],[11,"execute","futures::executor","",6,null],[11,"execute_boxed","","",6,null],[11,"execute","","",7,null],[11,"execute_boxed","","",7,null],[11,"poll","futures","",8,null],[11,"schedule","","",8,null],[11,"tailcall","","",8,null],[11,"poll","","",9,null],[11,"schedule","","",9,null],[11,"tailcall","","",9,null],[11,"poll","","",10,null],[11,"schedule","","",10,null],[11,"tailcall","","",10,null],[11,"poll","","",11,null],[11,"schedule","","",11,null],[11,"tailcall","","",11,null],[11,"poll","","",12,null],[11,"schedule","","",12,null],[11,"tailcall","","",12,null],[11,"poll","","",13,null],[11,"schedule","","",13,null],[11,"tailcall","","",13,null],[11,"finish","","Completes this promise with a successful result.",14,null],[11,"fail","","Completes this promise with a failed result.",14,null],[11,"drop","","",14,null],[11,"poll","","",15,null],[11,"schedule","","",15,null],[11,"tailcall","","",15,null],[11,"drop","","",15,null],[11,"poll","","",16,null],[11,"schedule","","",16,null],[11,"tailcall","","",16,null],[11,"poll","","",17,null],[11,"schedule","","",17,null],[11,"tailcall","","",17,null],[11,"poll","","",18,null],[11,"schedule","","",18,null],[11,"tailcall","","",18,null],[11,"poll","","",19,null],[11,"schedule","","",19,null],[11,"tailcall","","",19,null],[11,"poll","","",20,null],[11,"schedule","","",20,null],[11,"tailcall","","",20,null],[11,"poll","","",21,null],[11,"schedule","","",21,null],[11,"tailcall","","",21,null],[11,"poll","","",22,null],[11,"schedule","","",22,null],[11,"tailcall","","",22,null],[11,"poll","","",23,null],[11,"schedule","","",23,null],[11,"tailcall","","",23,null],[11,"poll","","",24,null],[11,"schedule","","",24,null],[11,"tailcall","","",24,null],[11,"poll","alloc::boxed","",4,null],[11,"schedule","","",4,null],[11,"tailcall","","",4,null],[11,"poll","","",4,null],[11,"schedule","","",4,null],[11,"tailcall","","",4,null],[6,"PollResult","futures","The result yielded to the `Future::schedule` callback which indicates the\nfinal result of a future.",null,null],[8,"Future","","Trait for types which represent a placeholder of a value that will become\navailable at possible some later point in time.",null,null],[16,"Item","","The type of value that this future will resolved with if it is\nsuccessful.",25,null],[16,"Error","","The type of error that this future will resolve with if it fails in a\nnormal fashion.",25,null],[10,"poll","","Query this future to see if its value has become available.",25,null],[10,"schedule","","Register a callback to be run whenever this future can make progress\nagain.",25,null],[10,"tailcall","","Perform tail-call optimization on this future.",25,null],[11,"boxed","","Convenience function for turning this future into a trait object.",25,null],[11,"map","","Map this future&#39;s result to a different type, returning a new future of\nthe resulting type.",25,null],[11,"map_err","","Map this future&#39;s error to a different error, returning a new future.",25,null],[11,"then","","Chain on a computation for when a future finished, passing the result of\nthe future to the provided closure `f`.",25,null],[11,"and_then","","Execute another future after this one has resolved successfully.",25,null],[11,"or_else","","Execute another future after this one has resolved with an error.",25,null],[11,"select","","Waits for either one of two futures to complete.",25,null],[11,"join","","Joins the result of two futures, waiting for them both to complete.",25,null],[11,"flatten","","Flatten the execution of this future when the successful result of this\nfuture is itself another future.",25,null],[11,"forget","","Consume this future and allow it to execute without cancelling it.",25,null],[8,"Wake","","A trait essentially representing `Fn(&amp;Tokens) + Send + Send + &#39;static`.",null,null],[10,"wake","","Invokes this callback indicating that the provided set of events have\nactivity and the associated futures may make progress.",26,null],[8,"IntoFuture","","Class of types which can be converted themselves into a future.",null,null],[16,"Future","","The future that this type can be converted into.",27,null],[16,"Item","","The item that the future may resolve with.",27,null],[16,"Error","","The error that the future may resolve with.",27,null],[10,"into_future","","Consumes this object and produces a future.",27,null],[11,"into_future","core::result","",28,null]],"paths":[[4,"PollError"],[3,"Tokens"],[8,"Executor"],[8,"ExecuteCallback"],[3,"Box"],[3,"Arc"],[3,"Inline"],[3,"Limited"],[3,"Collect"],[3,"Done"],[3,"Empty"],[3,"Failed"],[3,"Finished"],[3,"Lazy"],[3,"Complete"],[3,"Promise"],[3,"AndThen"],[3,"Flatten"],[3,"Join"],[3,"Map"],[3,"MapErr"],[3,"OrElse"],[3,"Select"],[3,"SelectNext"],[3,"Then"],[8,"Future"],[8,"Wake"],[8,"IntoFuture"],[4,"Result"]]};
initSearch(searchIndex);
